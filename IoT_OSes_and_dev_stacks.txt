# OSeS & Dev.Stasks [[{]]

## Fiware.org [[{standards.fiware,use_case.*,use_case.agriculture,]]
* <https://www.fiware.org/developers/catalogue/>
* <https://www.linkedin.com/mwlite/company/fiware>
* FIWARE is a CURATED FRAMEWORK of open source platform components
  which can be assembled together and with other third-party platform
  components to accelerate the development of Smart Solutions.
* The main and only mandatory component of any “Powered by FIWARE” platform
  or solution is a FIWARE Context Broker Generic Enabler, bringing a
  cornerstone function in any smart solution: the need to manage
  context information, enabling to perform updates and bring access to
  context.
* 458+ Members, 26 iHubs, 250+ Cities
* A curated framework of Open Source Platform components to
  accelerate the development of Smart Solutions
* Sectors: Agrifood, cities, energy, industry.
* NGSI-LD: <https://en.wikipedia.org/wiki/NGSI-LD>
* Orion Context Broker
  https://www.slideshare.net/fermingalan/orion-context-broker-20191021
  C++ implementation of the NGSIv2 REST API binding
  developed as a part of the FIWARE platform allowing you to manage the entire lifecycle of
  context information including updates, queries, registrations and
  subscriptions. ... create context elements and manage them
  through updates and queries ... subscribe to context information
  so when some condition occurs (e.g. the context elements have changed)
  a notification is sent.
* https://github.com/telefonicaid/fiware-orion
* https://github.com/Fiware/context.Orion-LD
[[standards.fiware}]]


[[{OS.101,OS.apache.mynewt,network.wireless.lorawan,network.wireless.lora,network.wireless]]
## Apache MyNewT 
* <https://mynewt.apache.org/>
* An OS to build, deploy and securely manage billions of devices.
* "Built for wireless"
  * Bluetooth Low Energy 5, Bluetooth Mesh, Wi-Fi, LoRaWAN, ...
* Compose, fine-tune, and build your image within 
  hours or even minutes.  [[{PM.low_code}]]
* Maximum throughput of 2Mbps
* 32+ concurrent connections, multiple connections in
  simulatenous central and peripheral roles
* LoRa PHY radio / transceiver (SX1276)
  LoRaWAN protocol for Class A and Class C endpoints
  API for application use with a sample app
* Bluetooth Mesh
  * Foundation Models (server role)
  * Provisioning bearers: PB-ADV and PB-GATT
  * Advertising and GATT bearers for message transport
  * Optional Relay and Proxy features
* Native support for TCP/IP, UDP
* Supports protocols for constrained networks e.g.
  CoAP and 6LoWPAN

* Security from the start
  * Secure bootloader
  * Device identity for secure provisioning
  * Authenticated, authorized, and encrypted data transfers
  * ...

* Image management module, failure-aware, and reliable remote
  firmware updates
* Richly instrumented statistics modules for OS components and
  network interfaces
* Easy to use sensor framework
* Auto-discovery and management using OIC1.1, the IoT platform
  standard from OCF (Open Connectivity Foundation)

* Cross-platform: Pick one MCU now. Migrate to another later.
  Cortex M0-M4 micro controllers, MIPS, RISC-V

* Supported Boards:
  ```
  | 6LoWPAN Clicker ,FRDM-K82F,FRDM-K64F,nRF5340 PDK,NUCLEO-F401RE
  | ,B-L475E-IOT01A ,Ublox BMD-345-Eval ,NUCLEO-F072RB ,Nordic Thingy:52
  | ,STM32-E407 ,NUCLEO-F303K8 ,HiFive1 ,NUCLEO-F411RE ,P-NUCLEO-WB55
  | ,Creator Ci40 IoT Kit ,PIC32-EMZ64 ,NUCLEO-F746ZG ,NUCLEO-F439ZI
  | ,B-L072Z-LRWAN1 ,Wi-FIRE ,NUCLEO-F030R8 ,STM32F4DISCOVERY ,STM32-P103
  | ,32L152CDISCOVERY ,NUCLEO-F303RE ,32F429IDISCOVERY ,NUCLEO-F103RB
  | ,Apollo EVB ,nRF52840 Dongle ,BMD-300: Bluetooth 5 ,Adafruit Feather
  | ,nRF5340 PDK ,P-NUCLEO-WB55-USBDongle ,NUCLEO-F767ZI ,nRF51 DK
  | ,NUCLEO-F413ZH ,nRF51 DK (16KB) ,Adafruit Feather STM32F405
  | ,NUCLEO-L476RG ,RuuviTag ,nRF52840 DK ,NINA-B1 series ,micro:bit
  | ,32F746GDISCOVERY ,PIC32-HMZ144 ,Apollo EVB ,nRF5340 Audio DK
  | ,STM32F3DISCOVERY ,Black VET6 ,STM32F411E-DISC0 ,Nano 2 ,Blend 2
  | ,nRF52 DK ,nucleo-l073rz ,nRF9160 DK,...
  ```
[[OS.apache.mynewt}]]

## circuit python [[{101,hardware.mcpu,PM.low_code,dev_lang.python,]]
<https://circuitpython.org/>
" The easiest way to program microcontrollers "
* CircuitPython is a programming language designed to simplify
  experimenting and learning to code on low-cost microcontroller boards.
* With CircuitPython, there are no upfront desktop downloads needed.
  Once you get your board set up, open any text editor, and start
  editing code. It's that simple.
[[}]]


## Thingsboard [[{101,OS.thingsboard,PM.low_code,qa.control_panel,use_case.agriculture,use_case.smart_energy,use_case.fleet_tracking,]]
<https://github.com/thingsboard/thingsboard>
* ThingsBoard is an open-source IoT platform for data collection,
  processing, visualization, and device management.
[[}]]



## OPC_Unified_Architecture [[{use_case.industrial.m2m,]]
<https://en.wikipedia.org/wiki/OPC_Unified_Architecture>
* OPC Unified Architecture (OPC UA) is a machine to machine communication
  protocol for industrial automation developed by the OPC Foundation.
* Distinguishing characteristics are:
  * Focus on communicating with industrial equipment and systems for data
    collection and control
  * Open - freely available and implementable under GPL 2.0 license [1]
  * Cross-platform - not tied to one operating system or programming language
  * Service-oriented architecture (SOA)
  * Inherent complexity - the specification consists of 1250 pages in 14 documents
  * Robust security
  * Integral information model, which is the foundation of the infrastructure
    necessary for information integration where vendors and organizations can
    model their complex data into an OPC UA namespace to take advantage of the
    rich service-oriented architecture of OPC UA. There are over 35
    collaborations with the OPC Foundation currently. Key industries include
    pharmaceutical, oil and gas, building automation, industrial robotics,
    security, manufacturing and process control.
[[}]]

[[{os.freertos,]]
## FreeRTOS
<http://linuxgizmos.com/amazon-aims-an-aws-savvy-version-of-freertos-at-iot-gizmos/>
[[}]]

[[{os.threadX,]]
## ThreadX: real-time
* <https://www.infoq.com/news/2023/12/threads-rtos-open-sourced/>
* picokernel design: ~ 2KB on ARM.
* **Certification for functional security and safety under several international standards**
* Created at Express Logic, acquired by Microsoft in 2019, integrated under the
  Azure RTOS umbrella and contributed to Eclipse Foundation under MIT license in 2023.
* ThreadX supports priority inheritance, efficient timers, and both asymmetric (AMP)
  and symmetric multiprocessing (SMP), which ensures thread isolation through a memory 
  management unit (MMU) or a memory protection unit (MPU).
* Advanced features include:
  * event-chaining: allows to link multiple resources based on independent events,
    thus allowing for example to activate a thread that is suspended waiting for
    two or more independent resources as soon as one of them becomes available.
  * a new scheduling model, known as preemption-threshold scheduling,
    allowing a task to only disable preemption of tasks up to a specified 
    threshold priority. Tasks with higher priorities are still allowed to preempt.
* It competes withWindRiver's VXWorks, Blackberry's QNX RTOS, AWS FreeRTOS.
 
[[}]]


## Yocto [[{]]
* <https://www.devprojournal.com/technology-trends/internet-of-things/why-iot-system-developers-need-the-yocto-project-for-custom-linux-solutions/>

### reliableembeddedsystems.com (Yocto training & Consultancy)
* <https://www.reliableembeddedsystems.com/>
* Training and consultancy on:
  * Yocto Linux.
  * Free RTOS.
  * Zephyr.
[[}]]

[[{os.android,os.linux.yocto,PM.low_code,hardware.mcpu.freescale,]]
## Boot2Qt
<https://boundarydevices.com/boot2qt-getting-started-guide/>
* Developing an embedded product requires 3 main steps:
  * selection of the proper hardware platform
    exclusively based on powerful i.MX cpus.
  * OS selection/setup.
  * User Interface (UI) development. (Qt!)
    Thanks to a Qt for Device Creation image (formerly calle Boot2Qt)
    working on all our platforms, one can download the IDE and start
    developing within minutes!
[[}]]

## W3C Web Thing Model [[{standards.w3c,PM.backlog]]
* <http://model.webofthings.io/>
* *WARN*: no updates since 2017-04-25
* Mozilla IoT Web Thing API: <https://iot.mozilla.org/wot/>
* Updated to 2022-01-13?
[[}]]

[[{standards,]]
## Mozilla WebOfThings
<https://www.infoq.com/news/2019/05/mozilla-web-things/>
[[}]]


[[{use_case.fleet_tracking,]]
## Eclipse Hono
<https://www.ecomotion.org.il/>
<https://projects.eclipse.org/projects/iot.hono>
* EcoMotion is a dynamic community with over 600 start-ups (constantly growing)
  and 7,000 members in the Smart Transportation sector. Understanding startups
  do not grow in a void, we bring together entrepreneurs, academics, government
  officials, local & global automotive industry representatives, investors and
  much more; providing a support platform for knowledge-sharing, networking and
  collaboration.
[[}]]

[[{use_case.cognitive,]]
## Voice assistant
* <https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-embedded-voice-assistant/>
* The team at Paris-based Snips has created a voice assistant that can be
  embedded in a single device or used in a home network to control lights,
  thermostat, music, and more. You can build a home hub on a Raspberry Pi and
  ask it for a weather report, to play your favorite song, or to brew up a
  double espresso. Manufacturers like Keecker are adding Snips’ technology to
  products like multimedia home robots. And Snips works closely with leaders
  across the value chain, like NVIDIA, EBV, and Analog Devices, in order to
  voice-enable an increasingly wider range of device types, from speakers to
  home automation systems to cars.
[[}]]

## Apache IoTDB [[{data.analytics,]]
* <https://iotdb.apache.org/>
*  Apache IoTDB (Database for Internet of Things): "high performance" 
  for data management and analysis.
* edge&cloud. 
* light-weight architecture.
* Deep integration with Apache Hadoop, Spark and Flink.
* Use-cases:
  * massive data storage.
  * high-speed data ingestion
  * complex data analysis in the IoT industrial fields. 
[[}]]


## OSADL Automation&Industry [[{use_case.industrial,standards,real_time,os.linux,]]
* <https://www.osadl.org/>
* Open Source Software for Automation and Other Industries.
* OSADL explained with a "Socrates Discourse":
  ```
  | > Project Manager:
  | >   "We need to get someone to develop a Linux driver for our new
  | >    machine controller. Here's a purchase order for the work."
  |   
  | < Purchase Department:
  | <   "Okay. Let me check the purchase order to make sure it follows our
  | <    standard procedure: NDA to be executed, source going into company's
  | <    safe ... "
  |
  | > Project Manager:
  | >   "Nope, we're going with Open Source - source gets published to the
  | >    Internet."
  |
  | < Purchase Department:
  | <    "What? We're paying for the development but the source code goes
  | <     out to the Internet? If everybody can use the source code, why are we
  | <     the only ones paying for this? No way this can fly!"
  ```
  The solution: <br/>
    OSADL allows those members interested in developing particular Open
  Source software to come together in an OSADL project supported by
  membership fees. With the agreement of a majority of members, OSADL
  can delegate the development of Open Source software components.
  Thus, what is (financially) impossible for the individual (company),
  many (OSADL members) can do.
* OSADL QA Farm:
- monitors and optimizes hardware/software of ~200 linux based computer systems.
- ensures general reliability+stability, provides fine-tunning of individual systems.
- helps companies slect the most appropiate embedded system for a particular app.
- offers a wide variety of research opportunities for scientific studies.
- rack space is include in the regular OSADL membership

* OSADL real-time Linux services:
  - are based on the so-called PREEMPt_Rt patches
  - help companies get the most out of Linux-based RT systems
  - include kenrel additions to detect the origin of unsatisfying RT
     behaviour (latency fighting")
  - closely cooperate with the Linux Foundation RTL Collaborative
    project and provide funding for it.

* OSADL OPC UA PubSub over TSN project
  - is commited to foster the deve. of next gen RT communication via
    Ethernet
  - is closely related to the open62541.org project on an Open Sou.
    implementation of PC UA PubSub.
  - Includes activites to improv TSN support of Linux kernel
  - uses the OSADL QA Farm to continuously demonstrate the performance
    progress of the project.

* OSADL's safety and security projects
  - include th SIL2LinuxMP project aiming to provide documents to
    facilitate safety certification.
  - aim to collectknowledger and stragegies of anew way of OOSS safety
    cert.
  - support development of methods and services to protect embedded
    systems against malware.
  - Intent to develop test and stress tools to ensure systems withstand
    cyber attacks.
[[}]]

## OCKAM IoT+Blockchain Identity [[{use_case.identity,]]
* <https://www.infoq.com/news/2019/01/ockam-blockchain-iot-identity>
* Ockam is a serverless platform that aims to make it easier for IoT
  developers to add blockchain-based identity, trust, and interoperability
  in their IoT devices. Ockam has recently open sources its SDK for Golang.
* By embedding the Ockam SDK into their devices, developers can make them
  part of the Ockam blockchain network, a decentralized, open platform that
  enables secure cryptographic identity management based on a recent W3C
  standard called Decentralized Identifiers (DID).
[[}]]

### Autonome: smartphone for Home automation [[{use_case.domotic,hardware,]]
* <https://github.com/autonome>
* Turn old smartphone into a home automation gizmo
* Mozilla Technical Evangelist Dietrich Ayala proposed a simple and
  affordable solution to home automation: A discarded smartphone can
  handle some of the most useful home automation tasks without
  requiring expensive hubs and sensors
  "Many phones have proximity|ambient light sensors, orientation, and battery"

* Ayala introduced his “Context” JavaScript program for
  turning an old Firefox OS smartphone into a combination hub and
  sensor array for remote home monitoring.

*  " Many hacker-oriented automation products avoid using the cloud, but
   the price of greater complexity. You get more privacy and open
   ource personalization, “but at a high cost in experimentation in
   ime and learning ,"

* IoT’s killer app: presence or absence

> A greater challenge affecting commercial and DIY IoT systems alike is the    
> lack of a compelling purpose. “You have to ask yourself, what problems am I  
> addressing?” said Ayala. “Do I really need to have the light reflect my mood 
> or do automated shopping? To me these aren’t solving day to day problems.    
> People have problems like not having enough money or time, or worrying about 
> sick relatives. Maybe they need to know if someone is in their house or      
> whether basic services are working. What you need is physical awareness put  
> in context — the presence/absence of things like noise, motion, or services. 

* Ayala spent a lot of time studying the readouts from sensors, as well as from
  the phone’s microphone, camera, and, radios, that would enable a remote user
  to draw conclusions about what was happening at home. This contextual
  information could then be codified into more useful notifications.

* With ambient light, for example, if it suddenly goes dark in the daytime,
  maybe someone is standing over a device, explained Ayala.*Feedback from the  
  accelerometer can be analyzed to determine the difference between footsteps, 
  an earthquake, or someone picking up the device. Scripts can use radio APIs  
  to determine if a person moving around is carrying a phone with a potentially 
  revealing Bluetooth signature.
* <https://www.youtube.com/watch?list=PLGeM09tlguZRbcUfg4rmRZ1TjpcQQFfyr&v=4RWSXlai6PE>
[[}]]

## Azure Sphere [[{os.linux.sphere,]]
* <https://azure.microsoft.com/en-us/services/azure-sphere/>
* How Azure Sphere ensures IoT security within a 4MB Linux stack(Sep 26, 2018)
  <http://linuxgizmos.com/how-azure-sphere-ensures-iot-security-within-a-4mb-linux-stack/>
* Azure Sphere also includes a proprietary crypto/secure boot
  stack called the Microsoft Pluton Security Subsystem, which runs
  on an MCU, as well an Azure Sphere Security Service, a turnkey
  cloud service for secure device-to-device and device-to-cloud communication.
* The Azure Sphere MT3620 Development Kit features MediaTek’s MT3620,
   a 500MHz Cortex-A7/Cortex-M4F hybrid SoC that runs the lightweight Azure
   Sphere OS on a single -A7 core.
* Custom Linux Security Module, which coordinates with Cortex-M4's
  proprietary Pluton security code using a mailbox-based protocol.
* Azure Sphere OS sits on top of the MCU’s Pluton stack, a
  security stack based on Arm TrustZone. This is followed by the custom
  Linux kernel, which in turn is topped by a cloud services update
  connectivity layer.
* The top level is for POSIX and real-time I/O app containers.
* custom kernel based on mainline Linux 4.9.

* MAJOR SHRINKAGE:
  * "avoid putting text into memory": lot on Execute-In-Place (XiP),
     """XiP lets you take a flash region and map it into the
        address space in read only, but also in a mode where
        you can execute it as code."""
  * """we tuned the kernel to make things modular so we could
       turn things off""" ... cache sizes and patched to tweak default sizes
* turned off lot of the memory tracking options and things like kallsyms.
* cut sysfs, which saved almost 1MB.
* In the end, much of the kernel space was taken up by the
  network stack and hardware drivers.

### Sphere SECURITY:
- Stripped-down version of the Linux Security Model (LSM)
  ""There's no shell or user account management,
     which really isn’t relevant for an IoT device and
     there's no sophisticated job and process management."""
- Fairfax also added fields that created an app identity
  for every task. "Applications and kernel modules can
  use these new fields for extended access control"
  - "Values are immutable — once set, they inherit by default."
- Linux treats the entire GPIO infrastructure as a single resource
  said Fairfax. "In the real world not everything connected to your
  chip has the same sensitivity. I might have one GPIO pin that
  toggles an LED saying I'm connected to the network, which is
  not super sensitive, but another GPIO might open the solenoid
  on my furnace to start gas flow, which is more worrisome."
  To compensate, the team added access control to existing
  features like GPIO to provide more granular access control.
- Each application has metadata in the file system that says:
  "Here's how to run me and here’s what I need".
  By default, all you get is compute and RAM — even network
  access must be declared as part of the manifest.

File System:
- ...They tried the read-only cramfs with XIP patches,
  as well as writable file systems like ext2, jfffs, and yaffs,
  but "they all took hundreds of kilobytes to initialize, or
  about 1/16th of the total system memory available.":j
  In the end, they ported the ultra-lightweight littlefs
  from Arm’s Mbed OS to Linux as a VFS module.

* USER AND APPLICATION MODEL:
  - custom init that calls the application manager that
    loads apps, configures their security environments,
    and launches them.
    """It's the only traditional process that runs on
      our system — everything else is part of an application."""
  - Azure Sphere applications are self describing and independently
    updatable. In fact, "they're actually their own independent file systems,"
    "They run isolated from each other and cannot access any resource from another app."
  - There are initially four pre-loaded system applications:
    - network management
    - updates
    - command and control via USB
    - hardware crypto and RNG acceleration
  - GDBServer is optional
  - OEMs can "add one or two apps that contain their own business logic"

- UPDATE POLICY:
  - "everything is OTA updatable and everything is renewable"
  - aiming for OTA security patch updates within 24 hours of public disclosure
  - Microsoft will manage all the OS updates, OEMs control their own app updates.
  
  - Future plans call for revisiting namespaces to create
    "something like a container" and there’s a plan to
    "reduce cap_sys_admin or make it more granular"
  
  - Also planned to explore integrating parts of
    SELinux or AppArmor.
[[}]]

## zephyrproject.org [[{101,os.zephyr,os.linux,doc_has.comparative,hardware.mcpu.stm32,]]
- <https://www.zephyrproject.org/>
- Alternative to Linux for IoT devices.
- Small, Scalable Open Source RTOS for IoT Embedded Devices
  The Zephyr™ Project is a scalable real-time operating system (RTOS)
  supporting multipe hardware architectures, optimized for resource
  constrained devices, and built with security in mind.

* Asymetic Muli Processing in Zephyr (STM32MP1):
<https://www.collabora.com/news-and-blog/blog/2021/03/03/asymmetric-multi-processing-with-linux-and-zephyr-on-stm32mp1/>
[[}]]

## rust_gpiozero [[{hardware.gpio,hardware.raspberry,]]
* <https://opensource.com/article/19/3/physical-computing-rust-raspberry-pi>
* port of the awesome GPIO Zero library to Rust-lang.
[[}]]

## StratifyOS [[{hardware.mcpu,OS,]]
* <https://github.com/StratifyLabs/StratifyOS>
* fully featured microcontroller operating system designed
  specifically for the ARM Cortex M architecture. It features:
  * Decoupled System and Application Binaries
  * Deep integration with Cortex M hardware such as the MPU,
    SysTick/PendSV, SVCall, Dual Stacks, NVIC, BPU, and Cache
  * POSIX Style Filesystems
  * Complete Hardware Abstraction
  * Threads
[[}]]

## Microsoft DeviceScript  [[{]]
https://github.com/microsoft/devicescript
https://microsoft.github.io/devicescript/

With Visual Studio Code Extension.

DeviceScript brings a professional TypeScript developer experience to
low-resource microcontroller-based devices. DeviceScript is compiled
to a custom VM bytecode, which can run in very constrained
environments.
1. Transpiles to bytecode.
2. Bytecode interpreter for low power/flash/memory.
3. Functional programming API!!!

### Example code for ESP32 board and a relay on pin A0:
  ```
  import { pins } from "@dsboard/adafruit_qt_py_c3"
  import { Temperature } from "@devicescript/core"
  import { ewma, tap, auditTime, levelDetector } from "@devicescript/observables"
  import { startRelay } from "@devicescript/servers"

  const thermometer = new Temperature()
  const t_ref = 68 // degree F
  const relay = startRelay({ pin: pins.A0 })

  thermometer.reading
      .pipe(
          tap(t_raw => console.data({ t_raw })),
          ewma(0.9),
          tap(t_ewma => console.data({ t_ewma })),
          auditTime(5000),
          tap(t_audit => console.data({ t_audit })),
          levelDetector(t_ref - 1, t_ref + 1),
          tap(level => console.data({ level }))
      )
      .subscribe(async level => {
          if (level < 0) await relay.enabled.write(true)
          else if (level > 0) await relay.enabled.write(false)
          console.data({ relay: await relay.enabled.read() })
      })
  ```
[[}]]

## ESP miPyShell [[{PM.low_code,hardware.ESP]]
* <https://github.com/vsolina/mipyshell>
* This is a simple shell implementation that enables you to
  **use your ESP almost as a normal UNIX computer**.
  If you have an ESP32 version with external PSRAM and SD card support,
  you can do some serious sh...stuff
  Should work with other MicroPython-supported controllers like
  pyboard, but did not test so far
- Standard commands integrated in sh.py:
  - ls, pwd, cd, cp, mv, mkdir, rmdir - Filesystem commands
  - cat - Print or write contents of a file
  - reboot, restart, reset - Hard reset
  - ps - List running threads
  - ifconfig - Network connection details
  - free - Memory information
  - df - List mounted file systems
  - help - Print available commands
  - uname - Details about MCU and MicroPython
  - kill - Does not work, should stop a background thread listed in ps
  - time - Measures execution time of another command
- Lots of useful scripts are provided with the project, eg.:
  - wifi - WiFi management
  - telnet - A telnet client
  - edit - On board file editor, wrapper around Micropython-Editor
  - httpd - Wrapper around microWebSrv that starts a web server in
            background, serving contents of /www directory
  - telnetd - Wrapper around utelnetserver that starts a telnet
            server Wi-Fi interface
  - wget - Spartanic version of wget that only supports downloading
           file from a url to current directory
  - umount - Unmount a mounted file system; Don't try to unmount root
           because you'll succeed
  - burn - Load your CPU to test stability
  - memtest - Flawed memory testing utility that kind of shows memory
           bandwidth
  - upip - Wrapper around upip module, use to install aditional
           libraries
  - pystone - Python benchmark
  - uptime - Print time in seconds since boot
  - wait - Waits for a specified number of seconds
  - temperature - Reads ESP32's integrated temperature sensor and
           outputs Degreees
  - freq - Modify and read CPU frequency on ESP32/8266
  - print - Draw text on ssd1306 OLED display
  - ramdisk - Create a temporary file system stored in RAM that
            dinamically allocates memory on demand
  - scani2c - Scans for i2c devices attached on ports sda = 4 and scl = 5
  - clear - Clears the screen
[[}]]

## Black Magic Probe  [[{qa.ux]]
* <https://github.com/blackmagic-debug/blackmagic> 
  The Black Magic Probe is a modern, in-application debugging tool for
  embedded microprocessors. It allows you see what is going on 'inside'
  an application running on an embedded microprocessor while it
  executes. It is able to control and examine the state of the target
  microprocessor using a JTAG or Serial Wire Debugging (SWD) port and
  on-chip debug logic provided by the microprocessor. The probe
  connects to a host computer using a standard USB interface. The user
  is able to control exactly what happens using the GNU source level
  debugging software, GDB. Serial Wire Output (SWO) allows the target
  to write tracing and logging to the host without using usb or serial
  port. Decoding SWO in the probe itself makes SWO viewing as simple as
  connecting to a serial port.
[[}]]

## devguard.io [[{qa,security,scalability,]]
* <https://devguard.io/>
* end to end encrypted IoT management suite, offering a cloudless 
  device management SDK that enables you to control millions of devices 
  without storing a single byte of data with any third-party. 
* Created by Avid Picciani , author of ZZ, C-dialect for formally 
  verified code.
* Don't let traditional IoT clouds become a third-party privacy and 
  security risk. Switch to cloudless iot-managment for full data 
  sovereignty.
[[}]]

## Fennel (Lua+Lisp)
- <https://fennel-lang.org/>
- Fennel is a programming language that brings together the speed,
  simplicity, and reach of Lua with the flexibility of a lisp syntax
  and macro system.
- Full Lua compatibility: Easily call any Lua function or library 
  from Fennel and vice-versa.
- Zero overhead: Compiled code should be just as efficient as 
  hand-written Lua.
- Compile-time macros: Ship compiled code with no runtime dependency 
  on Fennel.
- Embeddable: Fennel is a one-file library as well as an executable.
  Embed it in other programs to support runtime extensibility and
  interactive development.

# Lua RTOS [[{OS.LuaRTOS,hardware.ESP32,hardware.ESP8266,hardware.PIC32MZ,]]
* <https://github.com/whitecatboard/Lua-RTOS-ESP32/>
* real-time OS 
* minimal requirements of FLASH and RAM memory.
* easilly portable to any other 32-bit platform.
[[}]]

## Ericcson + WSO2  [[{security.identity.WSO2_API_Manager]]
* Ericsson Innovation Cloud (EIC) Platform has achieved a 
  groundbreaking milestone by creating the next-generation IoT platform 
  with the support of WSO2 API Manager and Identity Server.
* ... we will explore several captivating business cases, such as
  Drive Sweden, City as a Platform, and Connected Automotive Cars.
[[}]]

[[{hardware.mcpu.arm,]]
## Debugging ARM Microcontrollers with GDB and Python (video)
* <https://m.youtube.com/watch?v=gVL5snqePWs >
* focus on the *practical* configuration and usage of the relevant
  tools. In particular, I will present:
  * Debug interfaces SWD and the associated debug probes J-Link,
    STLink and libraries JLinkGDBServer, OpenOCD
  * How to install and configure arm-none-eabi-gdb(-py3) for
    debugging your ELF
  * Commonly used GDB commands and scripts
  * Advanced GDB scripting via its Python API
  * Inspecting peripheral state with CMSIS-SVD files and custom 
    visualizations
  * Dynamic call stack tracing and graphing
  * Coredumping for post -mortem debugging via CrashDebug
  * Remote GDB scripting via the Machine Interface
  * ITM profiling over SWO pin using Orbuculum
    Thread/IRQ/Workqueue scheduling visualization and latency analysis 
    using perfetto.
  * High-bandwidth ETM tracing over TRACE pins: J-Trace 
    and ORBtrace mini.
  * Interesting related projects and possible future 
    workThis talk is meant to introduce you to what is possible with 
    embedded debug tools in practice, rather than to give you a 
    comprehensive lecture.Niklas Hauser"
[[}]]

[[{security,use_case.supply_chain.tracking,]]
## Counterfeiting: Safe Label fingerprint
<https://insights.globalspec.com/article/11303/microparticle-fingerprint-prevents-counterfeit-products>
* Researchers from the University of Copenhagen’s Nano-Science Center
  have created a new way to stop counterfeiting. The team created a
  pirate safe labeling system that creates a unique fingerprint for
  individual items. The label with the fingerprint is applied before an
  item leaves the factory. The system is based on physical unclonable
  function (PUF) technology.
[[}]]

## Rpi Text-to-speech [[{use_case.cognitive,hardware.raspberry,]]
* <http://linuxgizmos.com/text-to-speech-raspberry-pi-add-on-starts-at-24/>
[[}]]

## TensorFlow on RPi [[{use_case.cognitive,hardware.raspberry,]]
* <https://github.com/EdjeElectronics/TensorFlow-Object-Detection-on-the-Raspberry-Pi>
* tutorial to set up TensorFlow's Object Detection API on the Raspberry Pi.
[[}]]

## Eclipse sensiNact [[{use_case.smartcities,]]
* <https://projects.eclipse.org/projects/technology.sensinact>
* The Eclipse sensiNact project consists of a software platform
  enabling the collection, processing and redistribution of any data
  relevant to improving the quality of life of urban citizens.
[[}]]

## SQLiteQueryServer: Bulk query DB over Network [[{data.analytics.sql,PM.low_code,]]
* <https://github.com/assafmo/SQLiteQueryServer>
* <https://www.reddit.com/r/linuxadmin/comments/beyzzb/sqlitequeryserver_bulk_query_sqlite_database_over/>
* WARN:
  * optimized for SELECT
  * INSERT/UPDATE/DELETE/CREATE/... *might be slow*
* Ex:
  ```
  | $ SQLiteQueryServer \                             ← Launching the server
  |   --db ./test_db/ip_dns.db \                      ← Source DB
  |   --query "SELECT * FROM ip_dns WHERE dns = ?" \  ← Parameterized query
  |   --port 8080

  | $ (                                               ← Querying the server
  |    cat << EOF
  | github.com                                        ← One query per line. Each (CSV) line represents
  | one.one.one.one                                     param1,param2,...
  | google-public-dns-a.google.com                      (No header)
  | EOF
  | ) | \
  | curl "http://localhost:8080/query" \
  |     --data-binary @-                              ← HTTP POST expected.
  ```
[[}]]

## Node-RED: IoT Visual Programing [[{OS.NodeRed,use_case.industrial,protocol.mqtt,network,]]
* <https://www.infoq.com/news/2019/10/nodered-1-0-released/>
* 2019-10: Node-RED version 1.0 bringing plenty of major new features:
  * asynchronous message passing model
  * new completion API
  * message cloning by default.
  * visual editor revamp.

* Created at IBM to make building industrial IoT solutions easier, Node-RED
  is an open-source visual programming environment enabling the creation of
  complex systems by interconnecting nodes representing physical devices,
  cloud systems, databases, API and so on. Nodes receive a message from any
  of their input nodes, process it, and propagate it through to output nodes
  . The overall resulting flow is what constitutes the computation carried
  through by the system. Node-RED comes with a large collection of nodes to
  handle a variety of common tasks, including sending and receiving HTTP/UDP
  /TCP/MQTT messages, running commands, and processing files, as well as
  nodes that simplifies the construction of complex logic, such as debug
  nodes, message multiplexers and demultiplexers, message buffers, and so on.
  More nodes are available from the Node-RED library.
[[}]]

## MicroZig [[{hardware.HAL,]]
* <https://github.com/ZigEmbeddedGroup/microzig>
* Unified abstraction layer and HAL for several microcontrollers 
* We support several chip families like the RP2 family by RaspberryPi 
Foundation, STM32 by STMicroelectronics, and many others.
[[}]]


[[{hardware.ouput.ui,low_memory,hardware.mcpu.stm,hardware.mcpu.PIC,hardware.mcpu.NXP,hardware.raspberry,hardware.mcpu.ESP32,]]
## Light Weight GL UIs
* <https://github.com/GridPlus/lvgl>
* LittlevGL provides everything you need to create a Graphical User
Interface (GUI) on embedded systems with easy-to-use graphical
elements, beautiful visual effects and low memory footprint.

Features include:
- Powerful building blocks buttons, charts, lists, sliders, images, etc.
- Advanced graphics with animations, anti-aliasing, opacity, smooth scrolling
- Various input devices touch pad, mouse, keyboard, encoder, buttons, etc.
- Multi-language support with UTF-8 encoding
- Fully customizable graphical elements
- Hardware independent to use with any microcontroller or display
- Scalable to *operate with little memory (64 kB Flash, 10 kB RAM)*
- OS, External memory and GPU supported but not required
- Single frame buffer operation even with advances graphical effects
- Written in C for maximal compatibility
- Micropython Binding exposes LittlevGL API in Micropython
- Simulator to develop on PC without embedded hardware
- Tutorials, examples, themes for rapid development
- Documentation and API references online

Supported devices: Basically, every modern controller - which is able 
to drive a display suitable to run LittlevGL. The minimal 
requirements:
- 16, 32 or 64-bit microcontroller or processor
- > 16 MHz clock speed
- > 8 kB RAM for static data and > 2 KB RAM for dynamic data (graphical objects)
- > 64 kB flash program memory
- Optionally ~1/10 screen sized memory for buffered drawing (on 240 × 320, 16-bit colors it's 15 kB)

some supported platforms include:
- STM32F1, STM32F3, STM32F4, STM32F7
- Microchip dsPIC33, PIC24, PIC32MX, PIC32MZ
- NXP Kinetis, LPC, iMX
- Linux frame buffer (/dev/fb)
- Raspberry PI
- Espressif ESP32
- Nordic nrf52
- Quectell M66
[[}]]

[[{network.wireless.lora,network.cloud,dev_lang.java,hardware.mcpu.STM32,]]
## Drogue: IoT+Cloud Integrated Stack
* <https://developers.redhat.com/articles/2021/06/10/connect-quarkus-applications-drogue-iot-and-lorawan>
* Drogue Device: firmware framework written in Rust with an actor-based programming model.
* Drogue Cloud:  thin layer of services creating an IoT-friendly API
  for existing technologies like Knative/Kafka, cloud friend (CloudEvents),
* Drogue Project aims at providing an overall solution for IoT+Cloud (vs separate components)
  ```
                             ┌─ Processing ┐
                             │             │
                             │  (Kafka)    │
  IoT ···········> HTTP  ┐   │   ┆         │
                         ├·> │   ▽         │
  IoT ·> Edge ···> MQTT  ┘   │ Transform   │
         Gateway             │   ???       │
                             │   ┆         │
                             │   ▽         │
                             │ Export ╶╶╶╶╶╶╶╶▷ Consumer
                             │ (Cloud      │    App
                             │  Events)    │
                             └─────────────┘
  ```
[[}]]

## Home IP Standard [[{use_case.domotic,standards.homeip,]]
* <https://www.connectedhomeip.com/>
* IP standard (Amazon, Apple, Google, Zigbee Alliance).
* Zigbee Alliance board member companies (IKEA, Legrand,
  NXP Semiconductors, Resideo, Samsung SmartThings, ... 
* Goals:
  * Connected Home over IP.
  * simplify development for manufacturers 
  * increase compatibility
  * secure, reliable, and seamless to use smart home devices.
[[}]]


## Massive IoT [[{network.mesh,]]
- Designing IoT architectures: Learning from Massive Spacecraft
  Telemetry Data Analytics, by Olivier Parisot, Philippe Pinheiro and 
  Patrik Hitzelberger (Luxembourg Institute of Science and Technology)
  * <https://ercim-news.ercim.eu/en119/special/designing-iot-architectures-learning-from-massive-spacecraft-telemetry-data-analytics>

- “Decision Management System for Safer Spacecrafts” (DMSS) is a
  data analytics platform for the space domain that can detect
  anomalies in huge telemetry data acquired from numerous sensors in a
  complex IoT architecture.

- Processing telemetry data is a challenge in any IoT architecture [1].
  In the space sector, monitoring remote sensors is a common problem.
  The recent increase in downlink bandwidth and available processing
  power on spacecrafts have resulted in an increase in the number and
  the volume of telemetry measurements available to spacecraft
  controllers to monitor the health and safety of a spacecraft.  In
  practice, the number of maintenance parameters is generally in the
  tens of thousands range. While providing a wealth of diagnostic
  information, these huge numbers overwhelm the ability of the human
  brain to oversee all telemetry measurements. Automatic checks and
  computer-aided data analysis can provide a daily overview for
  spacecraft operators and operations engineers.

- Smart End-to-end Massive IoT Interoperability, Connectivity and 
  Security (SEMIoTICS):<br/>
  <https://ercim-news.ercim.eu/en119/special/smart-end-to-end-massive-iot-interoperability-connectivity-and-security-semiotics>
[[}]]

## protobuf nano for IoT [[{protocol.protobuf,]]
* <https://jpa.kapsi.fi/nanopb/>
* Protocol Buffers for Embedded Systems
* small code-size ansi C implementation for microcontrollers.
  (<10 kB ROM, <1 kB RAM) memory constraints.
[[}]]

## TypeScriptToLua [[{dev_stack.lua,qa,]]
* <https://typescripttolua.github.io/>
[[}]]

## NodeMCU [[{hardware.mcu.ESP32,]]
* <https://en.m.wikipedia.org/wiki/NodeMCU>
* low-cost IoT platform. Initially supporting ESP8266 Wi-Fi SoC 
  and hardware which was based on the ESP-12 module.
* Later, support for the ESP32 32-bit MCU was added.
* Lua based
[[}]]

## awesome uPython [[{dev_lang.python,]]
* <https://github.com/mcauser/awesome-micropython>
  Curated list of awesome MicroPython libraries, frameworks, software 
and resources.
* MicroPython is a lean and efficient implementation of the Python 3 
programming language that includes a small subset of the Python 
standard library and is optimised to run on microcontrollers and in 
constrained environments.
* Contents
  ```
  | LIBRARIES         COMMUNITY
  | · AI              Books
  | · Analytics       Frameworks
  | · Audio           Resources
  | · Communications
  | · Display         DEVELOPMENT
  | · IO              · Code Generation
  | · Motion          · Debugging
  | · Sensors         · IDEs
  | · Scheduling      · Shells
  | · Storage         MISCELLANEOUS
  ```
[[}]]

## Contiki OS [[{os.contiki,]]
* <https://github.com/contiki-ng/contiki-ng>

* Contiki-NG: OOSS, cross-platform OS for Next-Generation IoT devices.
* Focus on:
  * secure and reliable low-power communication 
  * standard protocols (IPv6/6LoWPAN, 6TiSCH, RPL, and CoAP). 
* Extensive documentation, tutorials, a roadmap, release cycle,
  and well-defined development flow for smooth integration of 
  community contributions.
* platforms include ARM Cortex-M3/M4, Texas Instruments MSP430.
* Code footprint: ~100kB.
* memory usage: as low as 10 kB
[[}]]

## Arduino Studio IDE [[{hardware.arduino,]]
https://github.com/tldr-pages/tldr/blob/master/pages/common/arduino.md

* Arduino Studio IDE
  https://github.com/arduino/Arduino/blob/master/build/shared/manpage.adoc.

  $ arduino --verify {{path/to/file.ino}}  ← Build a sketch

  $ arduino --upload {{path/to/file.ino}}  ← Build + upload a sketch

  $ arduino --board {{arduino:avr:nano:cpu=atmega328p}} \  ← Build and upload a sketch to
            --port {{/dev/ttyACM0}} \                        Arduino Nano with Atmega328p,
            --upload {{path/to/file.ino}}                    connected on port /dev/ttyACM0

  $ arduino --pref {{name}}={{value}}      ← Set preference name to a given value


  $ arduino --pref build.path=$build_directory \  ← Build sketch → put results inbuild dir
            --verify $path_file.ino                 and reuse any previous build results in
                                                    that directory:

  $ arduino --save-prefs                   ← Save any (changed) preferences to preferences.txt
[[}]]

## micropython-monitor [[{dev_lang.python,hardware.mcpu,]]
* <https://github.com/peterhinch/micropython-monitor>

" A monitor for realtime MicroPython code "

* library initially designed to characterise uasyncio programs
<https://docs.micropython.org/en/latest/library/uasyncio.html>
 *It may also be used to study any code whose behaviour may change *
 *dynamically such as threaded code or applications using interrupts.*

* The device under test (DUT) is linked uni-directionally to a Rpy Pico.
  (UART or SPI). Rpy Pico displays the behaviour of the DUT by pin
  changes and optional print statements. A logic analyser or scope
  provides a view of the realtime behaviour of the code.
  ```
  ┌─ UART Wiring ─────  ┌─ SPI Wiring ─────
  │DUT     GPIO    Pin  │ DUT     GPIO  Pin
  │Gnd     Gnd     3    │ Gnd     Gnd     3
  │txd     1       2    │ mosi    0       1
  │                     │ sck     1       2
  │                     │ cs      2       4
  ```
  Debug statements are inserted at key points in the DUT code.
  causing state changes on Pico pins.

* A common cause of problems in asynchronous code is the case where a
  task blocks for a period, hogging the CPU, stalling the scheduler and
  preventing other tasks from running. Determining the task responsible
  can be difficult, especially as excessive latency may only occur when
  several greedy tasks are scheduled in succession.
  Ex.: a task hogs the CPU for 500ms, causing the scheduler to be
  unable to schedule other tasks.

* Test and demo scripts:
  * quick_test.py code being monitored at the point when a task hogs the CPU.
  * full_test.py Tests task timeout and cancellation, also the handling
    of multiple task instances...  it reveals max. time the DUT hogs
    the CPU.
  * latency.py Measures latency between start of monitored task and
    the Pico pin going high.
  * syn_test.py demonstrates two instances of a bound method along with
    the ways of monitoring synchronous code. The trigger on ident 5 marks
    the start of the sequence.
  * syn_time.py demonstrates timing of a specific code segment with a
    trigger pulse being generated every time the period exceeds its prior
    maximum.
[[}]]

## log2ram  [[{hardware.raspberry,qa.log2ram]]
* <https://github.com/azlux/log2ram>
* Like ramlog for systemd (on debian 8 jessie for example).
* Usefull for RaspberryPi for not writing on the SD card all the time.
  You need it because your SD card doesn't want to suffer anymore!
[[}]]
